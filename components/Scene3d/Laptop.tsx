//@ts-nocheck
import { useState, useEffect } from 'react'
import {
  Html,
  useGLTF,
  OrbitControls,
  GizmoHelper,
  GizmoViewport,
  GizmoViewcube,
  useHelper,
  BoxHelper,
  AxesHelper,
  useCubeTexture,
} from '@react-three/drei'
import { useThree, useFrame } from '@react-three/fiber'
import React, { useRef } from 'react'
import LaptopScreen from '../LaptopScreen/LaptopScreen'
import * as THREE from 'three'
import { useSpring, animated, config, to } from '@react-spring/three'
import { useLoader } from '@react-three/fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { Actions } from '../Context/Context'
//TODO: gui to DEV DEPS remove

export function Laptop(props) {
  const { context, dispatch } = props.context

  const group = useRef()

  const meshRef = useRef()

  // Load model
  const q = useGLTF('/laptop.glb')

  const [opening, setOpening] = useState(false)
  // Make it float
  useFrame(state => {
    const t = state.clock.getElapsedTime()

    const { x, y, z } = state.camera.position
    /*     if (opening && z > -29) {
      // console.log(x, y, z)
      console.log('look')
      state.camera.position.lerp(vec.set(0, 0, open ? -24 : -32), 0.01)
      // state.camera.lookAt(0, 0, 0)
      // setOpening(false)
    } else {
      setOpening(false)
    } */

    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      !open ? Math.cos(t / 2) / 10 : 0,
      0.1
    )
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      !open ? Math.PI + Math.sin(t / 4) / 20 : group.current.rotation.y,
      0.1
    )
    group.current.rotation.z = THREE.MathUtils.lerp(
      group.current.rotation.z,
      !open ? Math.sin(t / 4) / 20 : 0,
      0.1
    )
    group.current.position.y = THREE.MathUtils.lerp(
      group.current.position.y,
      !open ? (1 + Math.sin(t)) / 5 : -0.43,
      0.1
    )
  })
  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx

  // const [open, setOpen] = React.useState(false) TODO:
  const open = context.isLaptopOpened //scene.toggleIsLaptopOpened

  // console.log({ scene3dOpened: open })
  // const setOpen = () => {
  //   console.log(open)
  //   scene.toggleIsLaptopOpened()
  // }

  const [wasOpened, setWasOpened] = React.useState(false)
  const [hovered, setHovered] = useState(false)
  useEffect(
    () => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'),
    [hovered]
  )

  useEffect(() => {
    if (open) {
      setWasOpened(true)
      setOpening(true)
    }
  }, [open])

  const springs = useSpring({
    'rotation-x':
      open & !hovered
        ? -Math.PI / 10
        : open & hovered
        ? -Math.PI / 12
        : hovered
        ? Math.PI / 2.1
        : Math.PI / 2,
    config: { ...config.gentle, tension: 90, friction: 12 },
  })

  React.useEffect(() => {
    springs['rotation-x'].start({
      //TODO:
      config: !open
        ? config.slow
        : { ...config.gentle, tension: 90, friction: 12 },
    })
  }, [open, hovered])

  const texture = new THREE.TextureLoader().load('/13767-bump.jpg')
  texture.rotation = Math.PI / 4

  const envMap = useCubeTexture(
    ['posx.jpg', 'negx.jpg', 'posy.jpg', 'negy.jpg', 'posz.jpg', 'negz.jpg'],
    { path: '/textures/' }
  )
  // const envMap = useCubeTexture(
  //   ['px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg'],
  //   { path: '/textures/' }
  // )

  const mat1 = q.materials.ComputerFrame
  // console.log(mat1)
  mat1.metalness = 0.8
  mat1.roughness = 0.4
  mat1.color = new THREE.Color('skyblue')
  mat1.bumpMap = texture
  mat1.bumpScale = 0.006
  mat1.envMap = envMap
  mat1.lightProbeIntensity = 1.0
  mat1.directionalLightIntensity = 0.2
  mat1.envMapIntensity = 1
  mat1.envMaps = 'reflection'

  const mat2 = q.materials.ComputerScreen
  // console.log(mat2)
  mat2.metalness = 0.9
  mat2.roughness = 0.3
  mat2.color = new THREE.Color('skyblue')
  mat2.emissive = new THREE.Color('white')
  mat2.emissiveIntensity = 0.6
  mat2.envMap = envMap
  mat2.lightProbeIntensity = 1.0
  mat2.directionalLightIntensity = 0.2
  mat2.envMapIntensity = 1
  // mat2.bumpMap = texture
  // mat2.bumpScale = 0.003

  // mat2.map = null

  return (
    //TODO: make responsive with scale
    <group
      ref={group}
      {...props}
      rotation={[0, Math.PI, 0]}
      dispose={null}
      onPointerOver={e => {
        if (!open) {
          e.stopPropagation()
          setHovered(true)
        }
      }}
      onPointerOut={e => setHovered(false)}
    >
      <group
        onClick={e => {
          e.stopPropagation()
          if (!open)
            dispatch({
              type: Actions.TOGGLE_LAPTOP_OPENED,
            })
          dispatch({
            type: Actions.SET_BLINKING,
            payload: false,
          })
        }}
      >
        <mesh
          material={mat1}
          // material={q.materials.ComputerFrame}
          geometry={q.nodes.Frame_ComputerFrame_0.geometry}
          rotation-x={-Math.PI / 2}
          scale={[10, 10, 10]}
          onPointerOver={e => (e.stopPropagation(), setHovered(true))}
          onPointerOut={e => setHovered(false)}
          onClick={e => {
            e.stopPropagation()
            dispatch({
              type: Actions.TOGGLE_LAPTOP_OPENED,
            })
            dispatch({
              type: Actions.SET_BLINKING,
              payload: false,
            })
          }}
        />
        <animated.mesh
          material={mat2}
          // material={q.materials.ComputerScreen}
          geometry={q.nodes.Screen_ComputerScreen_0.geometry}
          rotation-y={Math.PI}
          rotation-x={springs['rotation-x']}
          position={[0, -0.02, -1.021]}
          ref={meshRef}
          scale={[10, 10, 10]}
        >
          {(open || wasOpened) && (
            <Html
              className='laptop-html-content'
              transform
              occlude
              scale={[0.01, 0.01, 0.01]}
              position={[0, 0.1, 0.004]}
              rotation-y={Math.PI}
            >
              <LaptopScreen open={open} />
            </Html>
          )}
        </animated.mesh>
      </group>
    </group>
  )
}
